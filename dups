#!/bin/sh
# vim: filetype=postscr

# This is a Bourne shell script wrapper surrounding a postscript program
# which graphically displays disk space usage.
#
# Usage: dups [DU OPTIONS] > output.ps

Title="${HOSTNAME}:${PWD}$ dups $@"
CreationDate=`date`
Creator="dups 1.8"

cat <<PSFILE
%!PS-Adobe-3.0
%%Title: $Title
%%Creator: $Creator
%%CreationDate: $CreationDate
%%For: $USER
%%Pages: 1
%%LanguageLevel: 3
%%DocumentSuppliedResources: procset dupsUtility 1.0 1
%%+ procset dupsPlot 1.0 1
% 
% Graphical display of disk usage with postscript.
%
% This is a postscript program which parses the output from the unix du program
% to produce either a pie or stacked bar chart summary.
%
% Carl Osterwisch, 2005
% https://sourceforge.net/projects/showdups/
%
%%EndComments
%%BeginProlog 
%%BeginResource: procset dupsUtility 1.0 1
% Function: Concatenates many strings together down to the stack mark
% -mark- string1 string2 string3 concattomark string
/concattomark {
    counttomark dup 1 add copy
    0 exch {
        exch length add % find the total length
    } repeat
    dup string exch % create the blank string which will hold result
    3 2 roll {
        2 index length sub
        2 copy
        5 4 roll
        putinterval % insert this string in the appropriate position
    } repeat
    pop % index
    exch pop % mark
} bind def

% Function: Convert size into human-readable format (e.g. 1.2K 234M 2.4G)
% int hreadable string string
/hreadable {
    [ (b) (K) (M) (G) (T) (P) (E) (Z) (Y) ]
    {
        exch
        dup 1024 lt {
            exit
        } {
            1024 div
            exch
            pop
        } ifelse
    } forall
   
    10 mul round 10 div
    dup 10 lt
    {
        3 string cvs
    } {
        cvi dup log cvi 2 add string cvs
    } ifelse
    exch
} bind def

% Function: Replace offensive characters in a string
/cleanup {
    [ ( ) ({) (}) (\() (\)) ] % These are the illegal characters to look for
    {
        exch
        {
            dup dup
            3 index search
            {
                length
                3 1 roll pop pop
                (_) putinterval % This is the replacement character
            } {
                pop pop exch pop exit
            } ifelse
        } loop
    } forall
} def

% Function: Process the raw du output, storing it in the dict
/readfile {
    % Usage: dict file readfile
    % Return the dict on the stack
    {
        dup         % copy the file object
        256 string  % create a buffer
        readline {  % read the next line
            token {
                /size exch def  % size, should be int
                cleanup         % remove bad characters from full path name
                /leaf 3 index def  % start searching at the root of the dict
                (/) % directory separator search string
                {
                    search {     % pop next dir name from full path
                        /dirname exch def
                        leaf dirname known not { leaf dirname 2 dict put } if % add it if it's not already there
                        leaf dirname get /leaf exch def   % follow this branch
                    } {  % end of the branch, store the size in the key (/)
                        /dirname exch def
                        dirname () eq not {  % ignore empty string caused by trailing /
                            leaf dirname known not { leaf dirname 2 dict put } if
                            leaf dirname get /leaf exch def   % follow this branch
                        } if
                        leaf (/) size put exit
                    } ifelse
                } loop
            } if    % there is a size--evaluate the rest
        } { 
            pop closefile exit 
        } ifelse
    } loop
    %dup 0 exch { printdict } forall pop
    {   % Skip up the trunk to find first child with more than one branch
        dup 
        dup length  % Number of children
        1 gt exch { 
            exch pop
            dup length  % Number of grandchildren
            1 gt exch (/) known or or
        } forall
        {
            % Current dict has either more than one child 
            % -or more than one grandchild
            % -or a child with only size defined
            exit
        } {
            % Should be only one child!
            { exch pop } forall
        } ifelse
    } loop
} bind def

/gettotal {
    % Make sure the parents have the sum of their children.
    % Usage: dict gettotal
    % Returns: The total of the dict
    dup
    (/) known { % Entry for total exists--just retrive it
        (/) get
    } {
        dup
        0 exch
        {
            exch pop 
            gettotal
            add
        } forall
        dup 3 1 roll    % Keep a copy of the total on the stack
        (/) exch put    % Define the dict entry
    } ifelse
} def

/gettotals {
    % Usage: dict gettotals
    % Returns: [ [key1 N1] [key2 N2] ... ] unsorted list of keys and totals
    [ exch
    {
        % key -value-
        dup type /dicttype eq {
            gettotal
            % key N
            2 array astore
        } { % ignore non-dicts
            pop pop
        } ifelse
    } forall
    ]
} def

/bubblesortpopular {
    % Sort array of arrays according to second column
    % Based on https://www.tinaja.com/glib/strconv.pdf
    mark exch aload length /idx exch store
    idx 1 gt {
        {
            0 1 idx 1 sub {
                pop
                2 copy 1 get
                exch 1 get
                gt {exch} if
                idx 1 roll
            } for
            idx 1 roll
            /idx idx 1 sub store
            idx 0 eq {exit} if
        } loop
    } if
    ]
} store

/forallsorted {
    % iterate through dict in order by total
    /proc exch def
    /data exch def
    data gettotals
    bubblesortpopular
    [ exch
    {
        [ exch
        data exch
        0 get
        dup
        3 1 roll
        get
        ]
    } forall
    ] {
        aload pop
        proc
    } forall
} def

/printdict {
    % Dump the dict to stdout
    % Usage: 0 -dict- { printdict } forall

    % lvl key value
    2 index { (\t) print } repeat
    exch dup length string cvs print % lvl value
    dup type /dicttype eq { 
        (\n) print
        1 index 1 add exch { printdict } forall % lvl lvl2
        pop
    } {
        (=) print
        ==
    } ifelse
} def
%%EndResource
%%BeginResource: procset dupsPlot 1.0 1
/usagepie {
    % Usage: R1 -dict- { usagepie } forall
    dup type /dicttype eq {
        % R1 /key -valuedict-
        dup 3 1 roll
        gettotal angscale mul  % pie slice in degrees
        % R1 -valuedict- /key ang
        dup 4 1 roll % R1 ang -valuedict- /key ang

        newpath
        4 index % R1 ang -valuedict- /key ang R1
        2 copy exch 0 exch 0 0 5 2 roll arc
        2 copy 
        barwidth add 2 copy
        exch 0 0 0 5 2 roll arcn
        closepath % R1 ang -valuedict- /key ang R1 ang R2
        gsave fill grestore % fill the shape
        gsave
            0 setgray stroke % outline

            dup 7 1 roll % R1 ang R2 -valuedict- /key ang R1 ang R2
        
            % Calculate arc length at R2 in points
            1.74533e-2 mul mul
            10 ge { % Show the label if there is enough room
                exch 2 div rotate % center
                
                % R1 ang R2 -valuedict- /key R1
                -5 moveto
               
                mark exch dup length string cvs
                % R1 ang R2 -valuedict- -mark- (key)
                (, ) 3 index (/) get 1024 mul hreadable
                concattomark show stroke % label
            } { 
                % R1 ang R2 -valuedict- /key ang R1
                pop pop pop
            } ifelse
        grestore

        % R1 ang R2 -valuedict-
        gsave
            currentgray gradientEnd add 2 div setgray % adjust gray
            { usagepie } forallsorted % plot children
        grestore

        pop         % pop the child level
        rotate
    } { % Special case--don't plot non-dicts
        pop % value
        pop % key
    } ifelse
} bind def

/usagebar {
    % Usage: dict { usagebar } forall
    dup type /dicttype eq {
        % /key -valuedict-
        dup 3 1 roll
        gettotal barscale mul  % bar height in points
        % -valuedict- key size
        dup 4 1 roll % size -valuedict- key size

        dup 0 0 barwidth 4 3 roll
        4 copy rectfill % fill the shape

        gsave
            0 setgray rectstroke % outline
            % size -valuedict- /key size
            dup 10 ge {
                dup 2 div 5 exch translate % center
                % size -valuedict- /key size
                exch dup length string cvs mark exch
                % size -valuedict- size mark (key)
                3 2 roll
                % size -valuedict- mark (key) size
                20 ge { % two-line label
                    0 0 moveto show
                    0 -10 moveto
                } { % one-line label
                    0 -5 moveto
                    (, )
                } ifelse
                counttomark 1 add index (/) get 1024 mul hreadable concattomark show stroke
            } { % no label
                pop pop
            } ifelse
        grestore

        gsave
            barwidth 0 translate
            currentgray gradientEnd add 2 div setgray % adjust gray
            { usagebar } forallsorted % plot children
        grestore

        0 exch translate
    } { % Special case--don't plot non-dicts
        pop % value
        pop % key
    } ifelse
} bind def
%%EndResource
%%EndProlog
%%Page: 1 1
%%BeginPageSetup
save                % Save the current state
/Times-Roman findfont 10 scalefont setfont % Default font
/gradientStart .95 def % Brightness of root-level shading
/gradientEnd .7 def % Brightness of final leaf
/margin 72 def      % Page margin (1/72")
/barwidth 72 def    % Width of each bar (1/72")
%%EndPageSetup
(ReusableStreamDecode) /Filter resourcestatus { %ifelse
    pop pop % status size
} {
    (** Postscript level 3 or newer is required.\n) print
    mark (** Current environment is postscript level ) 
    languagelevel 3 string cvs (.\n) concattomark print
} ifelse

currentfile
<< /Filter /SubFileDecode
    /DecodeParms << /EODCount 0 /EODString (%%EndData) >>
>> /ReusableStreamDecode
%%BeginData: ASCII
filter
`du -k $@`
%%EndData
10 dict exch    % Initialize the dict which will hold du data
readfile        % Read the file which should be on the stack
/dudata exch def

gsave
0.2 setlinewidth      % Line width in 1/72"
gradientStart setgray % initial shade

% Plot pie (true) or bar (false)
false
{
    clippath pathbbox % llx lly urx ury
    3 2 roll
    add 2 div
    3 1 roll
    add 2 div
    exch translate  % find center of page

    dudata gettotal
    360 exch div /angscale exch def % calculate degrees/kb

    180 rotate
    0   % level
    dudata { usagepie } forallsorted
    pop % level
} {
    72 72 translate  % left and bottom margins
    clippath pathbbox % llx lly urx ury
    4 2 roll pop pop
    72 sub dup % height - top margin
    
    dudata gettotal
    div /barscale exch def % calculate vertical points/kb

    exch 72 sub exch 0 0 4 2 roll rectclip % clip 1" from right

    dudata { usagebar } forallsorted
} ifelse
grestore

% Generate header/footer for the report
($Title) % Header
($CreationDate) ($Creator) % Two-part footer

% Show footer
currentfont 0.8 scalefont setfont
72 50 moveto show
dup stringwidth pop neg % string width in points for rjust
clippath pathbbox 4 2 roll pop pop pop 72 sub add
50 moveto show

% Show header
currentfont 2 scalefont setfont
clippath pathbbox 4 1 roll pop pop 72 add exch 65 sub moveto show

restore
showpage
%%EOF
PSFILE
